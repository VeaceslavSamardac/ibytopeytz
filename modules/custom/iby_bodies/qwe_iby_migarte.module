<?php
/**
 * @file
 */

/**
 * IMPORTANT: File source and DB name (as written in settings.php) are HARDCODED
 * for the sake of simplicity. When migrating one has to:
 * 1. set DB name to IBY_MIGRATE_DB in settings.php $database definition.
 * 2. create a symlink called DRUPAL_ROOT . '/' . IBY_MIGRATE_FILES
 */
define('IBY_MIGRATE_DB', 'drupal_iby');
//define('IBY_MIGRATE_FILES', 'sites/iby.local/files_source/files');
define('IBY_MIGRATE_FILES', 'sites/innovationbyyou.com/files_source/files');


/**
 * Implements hook_migrate_api().
 */
function iby_migrate_migrate_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_flush_caches().
 */
function iby_migrate_flush_caches() {
  iby_migrate_register_migrations();
}

/**
 * Register all D7->D7 migrations.
 */
function iby_migrate_register_migrations() {
  $common_arguments = array(
    'source_connection' => IBY_MIGRATE_DB,
    'source_version' => 7,
  );

  // For vocabulary migrations, source_vocabulary and destination_vocabulary are
  // required arguments.
  $vocabularies = array(
    'profile_appliance_manufacturer',
    'profile_continence_condition',
    'profile_continence_start_of_continence_issue',
    'profile_current_appliance_change_rate',
    'profile_current_appliance_manufacturer',
    'profile_current_appliance_type',
    'profile_current_application_type',
    'profile_general_hand_function',
    'profile_i_am_other',
    'profile_skin_characteristics_and_condition_around_stoma',
    'profile_stoma_position',
    'profile_stoma_shape',
    'profile_stoma_surgery_cause',
    'profile_stoma_surgery_year',
    'profile_stoma_type',
    'profile_type_of_continence_issue',
    'profile_wheel_chair_user',
  );


  // We're using the migrate_d2d class directly.
  $common_vocabulary_arguments = array_merge($common_arguments, array(
    'group' => 'Taxonomy terms migration',
    'class_name' => 'DrupalTerm7Migration',
  ));
  foreach ($vocabularies as $vocabulary) {
    $voc = taxonomy_vocabulary_machine_name_load($vocabulary);
    $machine_name = $vocabulary;
    $description = $voc->name;

    $arguments = array_merge($common_vocabulary_arguments, array(
      'source_vocabulary' => $vocabulary,
      'destination_vocabulary' => $vocabulary,
      'machine_name' => $machine_name,
      'description' => t('Migration of terms from "@voc"', array('@voc' => $description)),
    ));
    Migration::registerMigration($arguments['class_name'], $machine_name, $arguments);
  }


  // Tags Vocabulary Migration
  $arguments = $common_arguments + array(
    'group' => 'Taxonomy terms migration',
    'class_name' => 'TagsVocabularyMigration',
    'machine_name' => 'TagsVocabulary',
    'description' => t('Migration of tags vocabulary from Drupal 7'),
    'source_vocabulary' => 'tags',
    'destination_vocabulary' => 'tags',
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);


  // User Role Migration
  $arguments = $common_arguments + array(
    'group' => 'Users migration',
    'class_name' => 'UserRoleMigration',
    'machine_name' => 'UserRole',
    'description' => t('Migration of user roles from Drupal 7'),
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);


  // Users Migration
  $arguments = $common_arguments + array(
    'group' => 'Users migration',
    'class_name' => 'UsersMigration',
    'machine_name' => 'Users',
    'description' => t('Migration of users from Drupal 7'),
    'role_migration' => 'UserRole',
    'picture_migration' => 'Pictures',
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);


  // Pictures migration
  $arguments = $common_arguments + array(
    'group' => 'Files migration',
    'class_name' => 'DrupalPicture7Migration',
    'machine_name' => 'Pictures',
    'description' => t('Migration of user pictures from Drupal 7'),
    'source_dir'  => DRUPAL_ROOT . '/' . IBY_MIGRATE_FILES,
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);


  // Public Files migration
  $arguments = $common_arguments + array(
    'group' => 'Files migration',
    'class_name' => 'PublicFilesMigration',
    'machine_name' => 'PublicFiles',
    'description' => t('Migration of Public files from Drupal 7'),
    'source_dir'  => DRUPAL_ROOT . '/' . IBY_MIGRATE_FILES,
    'destination_dir'  => 'public://',
    'skip_pictures' => TRUE,
    'user_migration' => 'Users',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);


  // Private Files migration
  $arguments = $common_arguments + array(
    'group' => 'Files migration',
    'class_name' => 'PrivateFilesMigration',
    'machine_name' => 'PrivateFiles',
    'description' => t('Migration of Private files from Drupal 7'),
    'source_dir'  => DRUPAL_ROOT . '/' . IBY_MIGRATE_FILES . '/private_files', //- form prev migr
    //'source_dir'  => DRUPAL_ROOT . '/' . IBY_MIGRATE_FILES,
    'destination_dir'  => 'private://',
    'skip_pictures' => TRUE,
    'user_migration' => 'Users',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);


  // Forum Vocabulary to Discussions Migration (taxonomy to node migration, ordinary Chat/Discussion forums)
  $arguments = $common_arguments + array(
    'group' => 'Discussions migration',
    'class_name' => 'OrganicGroupDiscussionsMigration',
    'machine_name' => 'DiscussionsOG',
    'description' => t(''),
    'source_vocabulary' => 'forums',
    'destination_type' => 'forum',
    'parent_tid' => 92,
    'user_migration' => 'Users',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);

  // Forum Nodes to Discussions Nodes Migration
  $arguments = $common_arguments + array(
    'group' => 'Discussions migration',
    'class_name' => 'DiscussionsNodesMigration',
    'machine_name' => 'DiscussionsNodes',
    'description' => t(''),
    'source_type' => 'forum',
    'destination_type' => 'forum_topic',
    'group_content_access' => 1, // 1 - public, 2 - private
    'parent_tid' => 92,
    'migrate_map_ogdbase' => 'migrate_map_discussionsog',
    'user_migration' => 'Users',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);

  // Forum Comments Migration
  $arguments = $common_arguments + array(
    'group' => 'Discussions migration',
    'class_name' => 'DiscussionsCommentsMigration',
    'machine_name' => 'DiscussionsComments',
    'description' => t(''),
    'source_type' => 'forum',
    'destination_type' => 'forum_topic',
    'parent_tid' => 92,
    'user_migration' => 'Users',
    'node_migration' => 'DiscussionsNodes',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);



  // Forum Vocabulary to Challenges Migration (taxonomy to node migration, Challenges forums
  $arguments = $common_arguments + array(
    'group' => 'Challenges migration',
    'class_name' => 'OrganicGroupChallengesMigration',
    'machine_name' => 'ChallengesOG',
    'description' => t(''),
    'source_vocabulary' => 'forums',
    'destination_type' => 'challenge',
    'parent_tid' => 2,
    'user_migration' => 'Users',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);

  // Forum Nodes to Challenges Nodes Migration
  $arguments = $common_arguments + array(
    'group' => 'Challenges migration',
    'class_name' => 'ChallengesNodesMigration',
    'machine_name' => 'ChallengesNodes',
    'description' => t(''),
    'source_type' => 'forum',
    'destination_type' => 'forum_topic',
    'group_content_access' => 1, // 1 - public, 2 - private
    'parent_tid' => 2,
    'migrate_map_ogdbase' => 'migrate_map_challengesog',
    'user_migration' => 'Users',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);

  // Forum Comments Migration
  $arguments = $common_arguments + array(
    'group' => 'Challenges migration',
    'class_name' => 'ChallengesCommentsMigration',
    'machine_name' => 'ChallengesComments',
    'description' => t(''),
    'source_type' => 'forum',
    'destination_type' => 'challenge',
    'parent_tid' => 2,
    'user_migration' => 'Users',
    'node_migration' => 'ChallengesNodes',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);



  // Forum Vocabulary to VIP Rooms Migration (taxonomy to node migration, VIP Rooms forums)
  $arguments = $common_arguments + array(
    'group' => 'VipRooms migration',
    'class_name' => 'OrganicGroupVipRoomsMigration',
    'machine_name' => 'VipRoomsOG',
    'description' => t(''),
    'source_vocabulary' => 'forums',
    'destination_type' => 'vip_room',
    'parent_tid' => 5,
    'user_migration' => 'Users',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);

  // Forum Nodes to Vip Rooms Nodes Migration
  $arguments = $common_arguments + array(
    'group' => 'VipRooms migration',
    'class_name' => 'VipRoomsNodesMigration',
    'machine_name' => 'VipRoomsNodes',
    'description' => t(''),
    'source_type' => 'forum',
    'destination_type' => 'forum_topic',
    'group_content_access' => 2, // 1 - public, 2 - private
    'parent_tid' => 5,
    'migrate_map_ogdbase' => 'migrate_map_viproomsog',
    'user_migration' => 'Users',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);

  // Forum Comments Migration
  $arguments = $common_arguments + array(
    'group' => 'VipRooms migration',
    'class_name' => 'VipRoomsCommentsMigration',
    'machine_name' => 'VipRoomsComments',
    'description' => t(''),
    'source_type' => 'forum',
    'destination_type' => 'vip_room',
    'parent_tid' => 5,
    'user_migration' => 'Users',
    'node_migration' => 'VipRoomsNodes',
    'default_uid' => 1,
  );
  Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);

}

/**
 * Perform modifications of inline images` paths.
 */
function process_inline_images($body, $dest_uid = NULL, $source_nid = NULL) {

  $ckeditor_path = libraries_get_path('ckeditor');
  $smilie_path = '/' . $ckeditor_path . '/' . 'plugins/smiley/images/';

  $smilies = array(
    'smiley-cool.gif'          =>  'shades_smile.gif',
    'smiley-cry.gif'           =>  'cry_smile.gif',
    'smiley-embarassed.gif'    =>  'embaressed_smile.gif',
    'smiley-foot-in-mouth.gif' =>  'smiley-foot-in-mouth.gif',//- not in ckeditor
    'smiley-frown.gif'         =>  'sad_smile.gif',
    'smiley-innocent.gif'      =>  'angel_smile.gif',
    'smiley-kiss.gif'          =>  'kiss.gif',
    'smiley-laughing.gif'      =>  'teeth_smile.gif',
    'smiley-money-mouth.gif'   =>  'smiley-money-mouth.gif',//--- not in ckeditor
    'smiley-sealed.gif'        =>  'smiley-sealed.gif',//-------- not in ckeditor
    'smiley-smile.gif'         =>  'regular_smile.gif',
    'smiley-surprised.gif'     =>  'omg_smile.gif',
    'smiley-tongue-out.gif'    =>  'tounge_smile.gif',
    'smiley-undecided.gif'     =>  'confused_smile.gif',
    'smiley-wink.gif'          =>  'wink_smile.gif',
    'smiley-yell.gif'          =>  'angry_smile.gif',
  );

  $imgtags = array();
  $preg_result = preg_match_all('/<img[^>]+>/i', $body, $imgtags, PREG_SET_ORDER);
  if ($preg_result != 0 OR $preg_result != FALSE) {
    foreach ($imgtags as $tag) {

      preg_match('/src=[\s]?"([^"]*)"/i',$tag[0], $img);


      // == img tag should be removed --\
      /*
        forum_images/
        system/files/
        src=""
        src="data:image/"
        <img /> == no src at all
      */
      // == img tag should be removed --/

      if (
        (isset($img[1]) AND $img[1] == '') // src=""
        OR
        ($img == array()) // no src at all
        OR
        (strpos($img[1], 'forum_images/') !== false)
        OR
        (strpos($img[1], 'system/files/') !== false)
        OR
        (strpos($img[1], 'data:image/') !== false)
      ) {
        // Just remove crippled tags or tags with not used images.
        $body = str_replace($tag, '', $body);
        continue;
      }


      // ==  smileys search patterns --\
      /*
        smileys/
        emotions/
       */
      // ==  smileys search patterns --/

      if (
        (strpos($img[1], 'smileys/') !== false)
        OR
        (strpos($img[1], 'emotions/') !== false)
      ) {
        // ! FOR NOW just remove smiles !
        $body = str_replace($tag, '', $body);
        continue;
      }


      // ==  images search patterns --\
      /*
        sites/default/files/http:__
        sites/default/files/http://
        sites/default/files/forum//sites/default/files/forum/uploads
        http://www.innovationbyyou.com/sites/default/files/forum/uploads
        forum/uploads
        sites/default/files
      */
      // ==  images search patterns --/

      if (strpos($img[1], 'http://www.iasupport.org/forum/uploads') !== false) {
        // just pass some external images with 'forum/upload' in src
        continue;
      }

      if (strpos($img[1], 'sites/default/files/http:__') !== false) {
        //$file = explode('sites/default/files', $img[1]);
        //$new_src = trim(array_pop($file), '/');
        //$new_src = array_pop($file);
        //$body = str_replace($img[1], $new_src, $body);
        continue;
      }

      if (strpos($img[1], 'sites/default/files/http://') !== false) {
        $file = explode('sites/default/files', $img[1]);
        $new_src = trim(array_pop($file), '/');
        $new_src = array_pop($file);
        $body = str_replace($img[1], $new_src, $body);
        continue;
      }

      if (strpos($img[1], 'sites/default/files/forum//sites/default/files/forum/uploads') !== false) {
        $path = explode('//', $img[1]);
        $img[1] = '/' . $path[1];
      }

      if (strpos($img[1], 'http://www.innovationbyyou.com/sites/default/files/forum/uploads') !== false) {
        $path = explode('sites/default/files', $img[1]);
        $img[1] = '/' . $path[1];
      }

      if (strpos($img[1], 'forum/uploads') !== false) {

        $file = explode('/', $img[1]);
        $filename = array_pop($file);
        $filename_raw = rawurldecode(html_entity_decode($filename));

        $source_path_file = IBY_MIGRATE_FILES . str_replace('/sites/default/files', '', $img[1]);
        $source_path_file_raw = rawurldecode(html_entity_decode($source_path_file));
        $source_path_xml = str_replace($filename, 'folder_info.xml', $source_path_file);
        $source_path_xml_raw = rawurldecode(html_entity_decode($source_path_xml));

        $xmlstr = file_get_contents($source_path_xml_raw);
        $xmlobj = simplexml_load_string($xmlstr, NULL, LIBXML_NOCDATA);
        $owner = get_object_vars($xmlobj->owner);
        $owner_uid = $owner['uid'];

        if (file_exists($source_path_file_raw)) {
          // php 5.3 and above version
          //$finfo = new finfo(FILEINFO_MIME);
          //$info = $finfo->file($source_path_file_raw);
          //$mime = substr($info, 0, strpos($info, ';'));

          // php lower than 5.3 version
          $info = mime_content_type($source_path_file_raw);

          $type = substr($info, 0, strpos($info, '/'));
          $size = filesize($source_path_file_raw);

          $file_data = file_get_contents($source_path_file_raw);
          $new_file = file_save_data($file_data, 'public://' . $filename_raw, FILE_EXISTS_REPLACE);
          $new_file->uid = $dest_uid;
          $new_file->type = $type;
          file_save($new_file);
          file_usage_add($new_file, 'user', 'user', $dest_uid);
        }

        $mediatag = mediatag_by_filename($filename_raw);
        $body = str_replace($tag, $mediatag, $body);
        continue;
      }

      if (strpos($img[1], 'sites/default/files') !== false) {
        $file = explode('/', $img[1]);
        $filename = rawurldecode(array_pop($file));
        $mediatag = mediatag_by_filename($filename);
        $body = str_replace($tag, $mediatag, $body);
        continue;
      }

    }

  }

  return $body;

}


function mediatag_by_filename($filename) {
  $mediatag = '';
  $fid = db_select('file_managed', 'fm')
    ->fields('fm', array('fid'))
    ->condition('fm.filename', $filename, '=')
    ->execute()
    ->fetchField();
  if ($fid) {
    $mediatag = array(
      'type' => 'media',
      'view_mode' => 'media_large',
      'fid' => $fid,
      'attributes' => array(
        'alt' => '',
        'title' => '',
        'class' => 'media-image',
        'height' => '',
        'width' => '',
        'typeof' => 'foaf:Image'
      ),
    );
    $mediatag = '[[' . drupal_json_encode($mediatag) . ']]';
  }
  return $mediatag;

}
